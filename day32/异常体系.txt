异常体系：

1.什么是异常？
    在Java中把Java应用程序在编译或者运行
    时期所发生的问题被称为异常。

2.为什么会发生异常？
    编译期：检查语法有没有错误和安全问题。
    执行期：代码逻辑有问题就会在执行期发生异常

3.异常体系结构：
    Throwable：定义了所有的异常都具有可抛出性。

    常见方法：
        String getMessage();
        // 返回发生的异常的详细消息字符串。
        void printStackTrance();
        // 在IDE中，一般会以红色字体打印出发生异常的信息。

    异常（Exception）：
        Exception类：他是所有异常类的父类。
        异常一般是由代码中的逻辑问题所产生。
        Java程序出现了问题。

    错误（Error）：
        Error类：是所有错误类的父类。
        一般是由于硬件资源、Java虚拟资源或者文件资源发生错误所导致。

4.发生异常之后如何处理？
    Java中发生异常的默认处理方式是一层一层的抛给调用者，
    因为Java不知道该异常如何去处理。

    当在编写程序的时候，如果预测到程序中会发生异常，该如何
    处理？

5.处理异常的方式有哪些？
    1.不处理，只是告诉方法的调用者，该方法内可能会出现异常。
      该处理方式叫做异常的声明。

      声明方式：在方法上通过throws关键字进行声明。

      public int divide(int a,int b) throws Exception{}

      当代码中的某一行发生了异常，该行后面的所有代码都不会
      执行，终止了该方法的运行。类似于return。

      在调用方法声明异常的时候，通过throws关键字声明的异常要大于等于
      所调用的方法上声明的异常。

    2.针对于某个异常做出相应的处理。
      try{
        // 该代码块中存放的是预测可能会出现异常的代码

        // 该代码块中会将有可能发生异常的代码和该代码有
        // 关联的代码都放进来
      }

      catch(Exception e){
        // 处理异常的具体方式

        // 该处理方式的代码块的声明需要一个参数，该参数
        // 一般遵循以下特点：所调用的方法上声明的是什么
        // 异常，该参数就是什么异常。
      }

      finally{
        // 普通代码
        // 不管上面的异常会不会发生，该代码都会执行。
      }

    throw和throws的区别：
    前者抛出异常对象。位置在方法中出现异常的位置。
    后者声明异常，该关键字后面跟的是异常类。
    位置在方法声明的末尾。

6.异常的分类
    编译时异常：
        主要包括：
            代码中的语法错误，
            代码中的安全问题，
            代码中调用了其他声明了编译时异常的方法。
            Exception类属于编译时异常类。

    运行时异常：
        主要包括：
            代码中的逻辑错误。
        常见的几个运行时异常的类：
            RuntimeException // 运行时异常
            NullPointerException   // 空指针异常
            ArrayIndexOutOfBoundsException // 数组下表越界异常
            NumberFormatException  // 数值格式异常
            ClassCastException // 类转换异常
            ConccurrentModificationException // 并发修改异常
            NoSuchMethodException // 方法未找到异常
            NoSuchElementException // 未找到元素异常
            ArithmeticException // 算数异常

7.自定义异常类
    自定义一个类，继承自Exception或者Throwable即可。但是
    这样定义的异常类是编译时异常。如果要让自定义的异常类
    成为运行时异常，继承RuntimeException即可。












