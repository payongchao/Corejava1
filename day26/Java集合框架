Collection：
常用的方法：

添加：
    *add(obj);
    // 添加单个元素

    addAll(coll);
    // 添加一组元素

移除：
    *remove(obj);
    // 移除单个元素
    removeAll(coll);
    // 移除一组元素，移除指定的集合和原集合相同的元素。
    retainAll(coll);
    // 移除一组元素，
    // 移除的是原集合中和指定集合中不相同的元素。（取交集）
    clear();
    // 移除所有的元素

修改：
    在Collection中没有和修改操作相关的方法。

查询：
    iterator();
     // 获取在该集合中的元素上进行迭代的迭代器

获取集合长度：
    *size();

判断：
    *contains(obj);
    // 判断该集合中是否包含指定的元素
    containsAll(coll);
    // 判断该集合中是否包含指定的一组元素
    // （指定的集合中的所有元素）
    isEmpty();
    // 判断该集合是否为空（如果集合的size==0，该集合为空）

将集合转化成数组：
    toArray();
    toArray([]);
-----------------------------------
List：有序的集合。
          添加到集合中的元素的顺序
          和从该集合中取出元素的顺序是一致的。
      允许重复的元素。
List的特有方法：
添加：
    add(index,obj);
    // 向指定的位置插入单个元素
    addAll(index,list);
    // 向指定的位置插入一组元素
移除：
    remove(index);
    // 移除该集合中的指定位置上的元素
修改：
    set(index,obj);
    // 更改指定位置上的元素，更改之后的元素为obj
查询：
    get(index);
    // 返回该集合中的指定位置上的元素
    indexOf(obj);
    // 返回的是该元素在该集合中第一次出现的索引。
    lastIndexOf(obj);
    // 返回的是该元素在该集合中最后一次出现的索引。
    listIterator();
    // 返回的是ListIterator迭代器对象。
    listIterator(index);
    // 返回ListIterator迭代器对象，
    // 但是是从该集合的指定索引位置开始迭代。

其他特有方法：
    subList(start,end);
    // 返回的是从start索引位置（包含）
    // 到end索引位置（不包含）
    // 对原始集合进行截取所形成的新集合。
-----------------------------------------
ArrayList：
    特点：数据结构（数据的存储方式）是数组。
          查询很快，但是插入和删除较慢。
LinkedList：链接列表，链表
    特点：数据结构是链表。
          插入和删除很快，但是查询较慢。
    特有方法：
        addFirst();
        addLast();

        removeFirst();
        removeLast();

        // 下面这俩是获取并且移除
        pollFirst();
        pollLast();

        // 下面这俩是获取但不移除
        peekFirst();
        peekLast();

练习1：使用List集合存储N个字符串。
实现功能：对该集合中的字符串去重。

练习2：使用List集合存储Student(name,age)对象。
实现功能：对该集合中的Student对象去重。
对于Student对象“重复”的定义：
        认为姓名和年龄都相同的是同一个Student对象。
-----------------------------------------
Set集合：
    1.不允许重复元素。
    2.无序的。

    特有方法：无
实现类：
    HashSet：数据结构（数据存储方式）是哈希表。
        增：add(obj);
            // 当指定的元素不存在于该集合中的时候，
            // 添加指定的元素到该集合中。意味着如果
            // 该集合中存在指定的元素，则不添加。
        删：remove(obj);
            // 如果存在则删除，返回true；
            // 如果不存在，返回false。
            clear(); // 清空该集合
        改：无
        查：iterator(); // 迭代遍历该集合中的元素
        判断：contains(obj);
             // 判断指定的元素是否在该集合中
             isEmpty();
             // 通过size()方法判断该集合是否为空。
    TreeSet：
        特有方法：
            ceiling(obj);
            // 返回的是大于等于给定的元素的最小值
            higher(obj);
            // 返回的是严格大于给定的元素的最小值
            floor(obj);
            // 返回的是小于等于给定的元素的最大值
            lower();
            // 返回的是严格小于给定的元素的最大值
            fisrt();
            // 返回此集合中的第一个（最低）元素
            last();
            // 返回此集合中的最后一个（最高）元素

        特点：能够对集合中的元素按照自然顺序（从小到大）
              进行排序。
              他的数据结构是二叉树结构。

        作业：实现学生信息管理系统。
              Student(id,name,age,gender,grade);
              当上面的所有信息都相同的时候认为是同一个学生。

        功能：1.能对学生进行增删改查操作。
              2.能够按照学生的学号进行从小到大的排列。
              *.能够按照学生的学号进行从小到大或者从大到小的排列。
              3.能够按照性别和姓名以及年龄进行排序，
                如果上面都满足，按照学号排。


















-----------------------------------------------
foreach，增强for循环：
for(变量的定义:容器){
	// 其他操作
}
“变量的定义”中的变量的数据类型是什么？
数组：是定义该数组时的数据类型。
集合：就目前所学，是Object。
     原因是集合可以存储任意引用类型的数据，在学习泛型之前，
     也就是说在定义集合的时候没有添加泛型，Java虚拟机认为
     该集合中存储的都是Object类型的数据，实际上是进行了
     向上转型。所以在遍历的时候，如果不使用该元素中的
     特有属性或者特有方法，不需要向下转型。如果要使用，
     则需要向下转型（数据类型的强制转换）；






















