IO流技术：

什么是IO？
Input/Output：输入输出。

什么是输入输出？
在程序，都是相对于内存来说：
    从内存到其他设备的数据：输出。
    从其他设备到内存的数据：输入。

    设备：一系列的硬件环境。
    键盘，鼠标，显示器，打印机，硬盘。

什么是流（Stream）？
流是各个操作系统所对应的系统资源。

File类：Java用来描述计算机上一切文件资源。
File类在java.io包。

File：文件或者目录的路径名的抽象体现。

构造器：
    File(String fileName);
    // 将指定的字符串作为文件路径，创建一个
    // File对象。

File相关方法：

创建文件或者目录：先要判断一些该文件或者目录是否存在。

boolean exists();
// 判断文件或者是目录是否存在。

boolean createNewFile();
// 当且仅当File对象所表示的文件不存在的时候，创建一个新的空文件。
// 当File对象所表示文件存在的时候，就不再创建新的空文件。

boolean mkdir();
// 根据File对象所封装的字符串路径来创建单级目录

boolean mkdirs();
// 根据File对象所封装的字符串路径来创建多级目录

isFile();
// 判断File封装的字符串路径代表的是不是文件

isDirectory();
// 判断File封装的字符串路径代表的是不是目录

delete();
// 删除文件或者目录，当删除目录的时候，只能删除空目录。
// 该方法是直接调用本地操作系统的删除命令，删除过程
// 不经过回收站，直接删除。

String[] list();
// 查看某个目录下的文件或者目录，返回值表示的是此目录下的
// 文件或者目录的名字

File[] listFiles();
// 查看某个目录下的文件或者目录，返回值表示的是此目录下的
// 文件或者目录的路径被封装的File对象。

getAbsolutePath();
getPath();
// 当File对象封装的是绝对路径的时候，这俩没区别。

// 当File对象封装的是相对路径的时候，前者获取到的是该相对
// 路径所代表的文件或者目录的绝对路径；后者获取到的是该相对
// 路径，也就是new File(str)中的str是什么，这地方就是什么。

IO流：
Java按照文件的特性，将流分为字节流和字符流：
字符流：
Reader：字符输入流
Writer：字符输出流

字节流：
InputStream：字节输入流
    int read();
    // 读取一个字节，并返回该字节。
    int read(byte[]);
    // 最多读取该数组长度个字节的数据存储到该数组中,
    // 返回值是读取到的字节个数
OutputStream：字节输出流
    write(byte[]);
    // 将指定的数组中的数据全部写入到某个文件中。
    write(byte[],offset,length);
    // 将指定的数组从offset位置开始，将length个字节写入
    // 到某个文件中

其他的字节流：
命名方面的特点，该类的名字以他父类的名字结尾，
               以某个功能对应的名字开头。

编码问题：
在某个文件中写入了“你好”俩字，却占了6个字节：
由于该文件的编码是UTF-8，每个汉字最多占3个字节。
一般在所有的编码表中，一个英文字符占一个字节。
在GBK编码中，一个汉字占用2个字节。


BufferedInputStream：带缓冲区的字节输入流。

BufferedOutputStream：带缓冲区的字节输出流。
在使用带有缓冲区的流写入数据的时候，在数据写入完成之后。
需要调用该流的flush()方法，将数据进行写入操作。
当关闭该流的时候，会自动先调用flush()方法，将数据写出去。

flush()方法和close()方法都能将数据写出，区别：
flush之后，还可以继续使用该流对象来写数据。
close之后，关闭了该流资源，不能继续使用该流对象。

字符流：
Reader：输入字符流
Writer：输出字符流
操作纯字符的文件。

编码：按照某一种字符集（编解码规则）将数据转化成字节。
解码：按照某一种字符集将字节转化成数据。

InputStreamReader：将字节转化成字符。
OutputStreamWriter：将字符流转化成字节流。

带缓冲区的字符流：
BufferedReader：字符输入流。

String readLine();
// 如何确定一行文本的结束：当程序读取到“\r”、“\n”、“\r\n”
// 则认为该行读取结束。

// 返回值是：读取到的该行文本字符串；当读取到文件末尾的时候
// 返回的是null。

// 注意：该方法在读取一行文本的时候，读取的该行文本不包含
//       回车和换行符。

在读取文本文件的时候，比较高效的写法：

FileInputStream fis=new FileInputStream(file);
InputStreamReader isr=new InputStreamReader(fis);
BufferedReader br=new BufferedReader(isr);


BufferedWriter：字符输出流。
高效的写法：
FileOutputStream fos=new FileOutputStream(file);
OutputStreamWriter osw=new OutputStreamWriter(fos);
BufferedWriter bw=new BufferedWriter(osw);

键盘录入：
Java中，从键盘录入的数据都是字节。
System.in：标准输入流，指的是从键盘的输入。
System.out：标准输出，指的是将数据输出到显示器上。

从键盘接收输入的步骤/思路：
1.从键盘接收的数据是标准输入流，即InputStream。
2.将该字节流转化成字符流，InputStreamReader。
3.对得到的字符流进行操作。

从键盘接收输入还有一种形式：使用Scanner类。不推荐。

作业：
1.从键盘接收一组值形式为：
    “姓名,语文成绩,数学成绩,英语成绩”。
2.创建Student(name,chinese,math,english,sum)对象，
    来接收上面的输入。
3.计算总成绩。
4.将姓名和计算的总成绩以一下形式“姓名::总成绩”存放到某个
    文件中。
















